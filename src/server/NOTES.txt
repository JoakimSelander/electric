Design Notes for MODBUS data marshalling, validation and propagation via RESTful endpoints.

USBHID MODBUS Layer - responsible for communication at the level of USB-HID to the charger using C-style structs.  This
requires appropriately formed struct packing and endian awareness.

Problems to Solve:
- What part of the system translates from modbus data segments into sane / more usable python objects
    - reads: ChargerCommsManager - uses multiple data segments to read & passes result into data-object ctor, which
      then pulls out each tuple and applies to attributes.  Conversion from modbus on-the-wire format MUST be
      performed at this stage - as the internal representation is NOT intended to be modbus data.

    - writes: from JSON (rest api), passes into validator and then into data-object whic

- Data-Objects take DataSegments from MODBUS and store the results in object attrs.

- Incoming JSON for put/post/patch, load the data into a Data-Object and call validate() - if that passes then the write
can take place.  The Data-Object and ChargerCommsManager work together to product a series of MODBUS segments that can be
written to the USB-HID device and into the charger.

- How can I define the meta data externally to the UI's, I want to provide schema/meta so that each field has at
least the following information associated with it:
    - short name
    - data type (int, str, enum)
    - when int:
        - maximum value
        - minimum value
        - default value
    - when str:
        - default value

- What part of the system validates the inputs from the RESTful API and when?

Decisions:

ChargerCommsManager is responsible for:
- reading modbus segments (ReadDataSegment instances) and constructing python objects with attributes
- using the data objects to obtain data segments that can be written to modbus API

Data-Object is responsible for:
- hold a python internal representation of the data, conversions already taken place, e.g. volts / 1000.
- capability to validate the representation
- used as a source to produce JSON or MODBUS segments

Research:

https://github.com/keleshev/schema
Small lib, entirely contained in schema.py - could be used to put a layer of validation onto the incoming JSON,
 but not suitable to describe the data-objects themselves.

https://github.com/schematics/schematics
http://schematics.readthedocs.io/en/latest/
 Used to define data-structures, convert to/from JSON/MsgPack, validate API inputs and expose only a portion of the fields.

 Pros:
 - class like structure maps well into the need for data-ojects
 - built in way to produce JSON. and to expose only what is require - although Flask-RESTful does that too
 - data validation - max_length, min_length, required vs optional, min_value, max_value and custom per field validators
 - can create own types (for modbus - bonus!)
 - can create mock objects for unit testing

 Cons / Unsure:
 - how to produce modbus segments?